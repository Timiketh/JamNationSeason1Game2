<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>target = -1;
init = false;
startAt = 1;
endAt = 0;
fadeVitesse = room_speed;
stepValue = 0;
delai = 0;

proxy = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (!init)
{
    if (!proxy)
    {
        with(target)
        {
            image_alpha = other.startAt;
        }
    }
    else
    {
        image_alpha = startAt;
    }
    stepValue = (endAt-startAt)/fadeVitesse;
    init = true;
}
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (!init)
{
    if (!proxy)
    {
        with(target)
        {
            image_alpha = other.startAt;
        }
    }
    else
    {
        image_alpha = startAt;
    }
    stepValue = (endAt-startAt)/fadeVitesse;
    init = true;
}
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (init)
{
    if (delai &lt;= 0)
    {
        if (target != -1 &amp;&amp; instance_exists(target))
        {
            var targetTemp = target;
            if (proxy)
            {
                targetTemp = self;
            }
            
            
            targetTemp.image_alpha += other.stepValue;
            
            if (endAt &gt; startAt)
            {
                if (targetTemp.image_alpha &gt;= endAt)
                {
                    targetTemp.image_alpha = endAt;
                    instance_destroy();
                }
            }
            else
            {
                if (targetTemp.image_alpha &lt;= endAt)
                {
                    targetTemp.image_alpha = endAt;
                    instance_destroy();
                }
            }
        }
        else
        {
            instance_destroy();
        }
    }
    else
    {
        delai -= 1;
    }
    depth = -y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!init)
{
    if (!proxy)
    {
        with(target)
        {
            image_alpha = other.startAt;
        }
    }
    else
    {
        image_alpha = startAt;
    }
    stepValue = (endAt-startAt)/fadeVitesse;
    init = true;
}
depth = -y;
if (proxy)
{
    with(target)
    {
        var oldX = x;
        var oldY = y;
        var oldAlpha = image_alpha;
        var oldXscale = image_xscale;
        var oldYscale = image_yscale;
        
        x = other.x;
        y = other.y;
        image_alpha = other.image_alpha;
        
        
        var oldVisible = visible;
        visible = true;
        event_perform(ev_draw, 0);
        visible = oldVisible;
        
        x = oldX;
        y = oldY;
        image_alpha = oldAlpha;
        image_xscale = oldXscale;
        image_yscale = oldYscale;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
