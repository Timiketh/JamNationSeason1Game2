<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_vide</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9995</depth>
  <persistent>0</persistent>
  <parentName>obj_dialogue_dessine</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_safe_check(obj_control_dialogue);

font = "latha.ttf";

reset = true;

dialogue = -1;//obj_dialogue

SPRITE = 1;
RECTANGLE = 2;

bgStyle = RECTANGLE;
oldSprite = -1;

W = 600;
H = 250;

DIALOGUE_LU = 1;
DIALOGUE_RU = 2;
DIALOGUE_LD = 3;
DIALOGUE_RD = 4;
DIALOGUE_CC = 5;
DIALOGUE_CU = 6;

dialoguePosition = DIALOGUE_LU;

PORTRAIT_LU = 1;
PORTRAIT_RU = 2;
PORTRAIT_LD = 3;
PORTRAIT_RD = 4;

portraitPosition = PORTRAIT_LU;

//Offset autour de l'écran (pour pas que la boîte de dialogue soit SUR le bord de l'écran.
OFFSET_ECRAN = 50;

//Couleur du BG si styleBG == RECTANGLE
coul1 = c_white;
coul2 = c_white;
coul3 = c_white;
coul4 = c_white;

//index du dialogue
index = 0;

windowW = view_wview[view_current];
windowH = view_hview[view_current];

portraitW = 80;
portraitH = 80;

sprCadre = -1;
sprCadreDialogue = -1;
sprCadrePortrait = -1;

oldSprCadre = -1;
oldSprCadreDialogue = -1;
oldSprCadrePortrait = -1;


texteX = -1;
texteY = -1;
texteW = -1;
texteH = -1;

scaleSprCadreX = 1;
scaleSprCadreY = 1;

scaleSprCadreXportrait = 1;
scaleSprCadreYportrait = 1;

scaleSprCadreDialogueX = 1;
scaleSprCadreDialogueY = 1;

scaleSprCadrePortraitX = 1;
scaleSprCadrePortraitY = 1;

sprPortraits = ds_map_create();
sprPortraitsW = ds_map_create();
sprPortraitsH = ds_map_create();



portraitBgStyle = RECTANGLE;

//BG scale pour le portrait.
scaleBgPortraitW = 1;
scaleBgPortraitH = 1;

sprBgPortrait = -1;
oldSprBgPortrait = -1;

sprBgPortraitDefaultX = 1;
sprBgPOrtraitDefaultY = 1;

OFFSET_CADRE = 20;

next = false;





X = -1;
Y = -1;
isPortrait = false;
currentPortrait = -1;
PX = -1;
PY = -1;
scalePW = 1;
scalePH = 1;


tailleTexteEnPourcentage = 0.01;

grille = -1;

init = false;
tailleRepliques = -1;

fontColor = c_black;

skipFirstDraw = true;

fini = false;

simpleFont = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(sprPortraits);
ds_map_destroy(sprPortraitsW);
ds_map_destroy(sprPortraitsH);
with(dialogue)
{
    instance_destroy();
}
with(grille)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!init)
{
    init = true;
    tailleRepliques = ds_list_size(dialogue.repliques);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>windowW = view_wview[view_current];
windowH = view_hview[view_current];
if (init &amp;&amp; !fini)
{
    //scale pour sprite BG.
    if (sprite_index != oldSprite)
    {
        image_xscale = W/sprite_get_width(sprite_index);
        image_yscale = H/sprite_get_height(sprite_index);
      
        scaleSprBgPortraitDefaultX = portraitW/sprite_get_width(sprite_index);
        scaleSprBgPortraitDefaultY = portraitH/sprite_get_height(sprite_index);
        
        oldSprite = sprite_index;
    }
    
    if (sprCadre != oldSprCadre)
    {
        var thisSprW = sprite_get_width(sprCadre);
        var thisSprH = sprite_get_height(sprCadre);
    
        scaleSprCadreX = (W)/(thisSprW-sprite_get_xoffset(sprCadre)*2);
        scaleSprCadreY = (H)/(thisSprH-sprite_get_yoffset(sprCadre)*2);
        scaleSprCadreXportrait = portraitW/(thisSprW-sprite_get_xoffset(sprCadre)*2);
        scaleSprCadreYportrait = portraitH/(thisSprH-sprite_get_yoffset(sprCadre)*2);
        oldSprCadre = sprCadre;
    }
    
    if (sprCadreDialogue != oldSprCadreDialogue)
    {
        scaleSprCadreDialogueX = (W)/(sprite_get_width(sprCadreDialogue)-sprite_get_xoffset(sprCadreDialogue)*2);
        scaleSprCadreDialogueY = (H)/(sprite_get_height(sprCadreDialogue)-sprite_get_yoffset(sprCadreDialogue)*2);
        oldSprCadreDialogue = sprCadreDialogue;
    }
    
    if (sprCadrePortrait != oldSprCadrePortrait)
    {
        scaleSprCadrePortraitX = (portraitW)/(sprite_get_width(sprCadrePortrait)-sprite_get_xoffset(sprCadrePortrait)*2);
        scaleSprCadrePortraitY = (portraitH)/(sprite_get_height(sprCadrePortrait)-sprite_get_yoffset(sprCadrePortrait)*2);
        oldSprCadrePortrait = sprCadrePortrait;
    }
    
    if (sprBgPortrait != oldSprBgPortrait)
    {
        scaleSprBgPortraitW = portraitW/sprite_get_width(sprBgPortrait);
        scaleSprBgPortraitH = portraitH/sprite_get_height(sprBgPortrait);
        oldSprBgPortrait = sprBgPortrait;
    }
    
    if (next)
    {
        index += 1;
    
        reset = true;
        
        next = false;
    }
    
    if (reset)
    {
        reset = false;
        if (index &lt; tailleRepliques)
        {         
            currentPortrait = ds_list_find_value(dialogue.portraits, index);
            
            if (sprite_exists(currentPortrait))
            {
                isPortrait = true;
            }
            else
            {
                isPortrait = false;
            }
            
            //BOîTE DE DIALOGUE
            var position = ds_list_find_value(dialogue.repliquesPos, index);
            if (position == -1)
            {
                position = dialoguePosition;
            }
            switch(position)
            {
                case (DIALOGUE_CC) : X = windowW/2-W/2; Y = windowH/2-H/2; break;
                case (DIALOGUE_RU) : X = windowW - W - OFFSET_ECRAN; Y = OFFSET_ECRAN; break;
                case (DIALOGUE_LD) : X = OFFSET_ECRAN; Y = windowH - H - OFFSET_ECRAN; break;
                case (DIALOGUE_RD) : X = windowW - W - OFFSET_ECRAN; Y = windowH - H - OFFSET_ECRAN; break;
                case (DIALOGUE_CU) : X = windowW/2-W/2; Y = OFFSET_ECRAN; break;
                default : 
                case (DIALOGUE_LU) : X = OFFSET_ECRAN; Y = OFFSET_ECRAN; break;
                
            }        
            
            //PORTRAIT
            if (isPortrait)
            {        
                var elem = ds_map_find_value(sprPortraits, currentPortrait);
                if (elem == noone || elem == -1 || elem == undefined)
                {
                    var newScaleW = portraitW/sprite_get_width(currentPortrait);
                    var newScaleH = portraitH/sprite_get_height(currentPortrait);
                    ds_map_add(sprPortraits, currentPortrait, currentPortrait);
                    ds_map_add(sprPortraitsW, currentPortrait, newScaleW);
                    ds_map_add(sprPortraitsH, currentPortrait, newScaleH);   
                    scalePW = newScaleW;
                    scalePH = newScaleH;
                }
                else
                {
                    scalePW = ds_map_find_value(sprPortraitsW, currentPortrait);
                    scalePH = ds_map_find_value(sprPortraitsH, currentPortrait);
                }
                
                var positionP = ds_list_find_value(dialogue.portraitsPos, index);
                if (positionP == -1)
                {
                    positionP = portraitPosition;
                }
                switch(positionP)
                {
                    case (PORTRAIT_RU) : PX = X+W-portraitW/2; PY = Y-portraitH/2; texteX = X + OFFSET_CADRE; break;
                    case (PORTRAIT_LD) : PX = X-portraitW/2; PY = Y+H-portraitH/2; texteX = X + OFFSET_CADRE + portraitW/2; break;
                    case (PORTRAIT_RD) : PX = X+W-portraitW/2; PY = Y+H-portraitH/2; texteX = X+OFFSET_CADRE; break;
                    default : 
                    case (PORTRAIT_LU) : PX = X-portraitW/2; PY = Y-portraitH/2; texteX = X + OFFSET_CADRE + portraitW/2; break;
                    
                }
                texteW = W - (2*OFFSET_CADRE) - portraitW/2;
            }
            else
            {
                texteW = W - (2*OFFSET_CADRE);
                texteX = X + OFFSET_CADRE;
            }
            
            //TEXTE
            texteY = Y + OFFSET_CADRE;
            texteH = H - (OFFSET_CADRE*2);
            
            if (-1 != grille &amp;&amp; instance_exists(grille))
            {
                with (grille)
                {
                    instance_destroy();
                }
            }
            
            grille = scr_creer_grille_lettres(texteW, texteH, tailleTexteEnPourcentage, font, obj_lettre, false, fontColor, simpleFont);
            grille.x = texteX;
            grille.y = texteY;
            grille.depth = depth-1;
            
            var ligneDialogue = ds_list_find_value(dialogue.repliques, index);
            var lignesTemp = ds_list_create();
            scr_parse_lignes_texte_pour_grille(ligneDialogue, grille, lignesTemp);
            scr_set_texte_sur_grille(grille, lignesTemp);
            ds_list_destroy(lignesTemp);
        }
        else
        {
            fini = true;
            alarm[0] = 2;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!persistent &amp;&amp; !persist())
{
    ds_map_destroy(sprPortraits);
    ds_map_destroy(sprPortraitsW);
    ds_map_destroy(sprPortraitsH);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///OVERWRITE DRAW GUI PARENT
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!skipFirstDraw)
{
    var vx = view_xview[view_current];
    var vy = view_yview[view_current];
    //BOîTE DE DIALOGUE
    if (bgStyle == SPRITE)
    {
        draw_sprite_ext(sprite_index, image_index, vx+X, vy+Y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    }
    else
    {
        draw_rectangle_colour(vx+X, vy+Y, X+W, Y+H, coul1, coul2, coul3, coul4, false);
    }
    
    if (sprite_exists(sprCadreDialogue))
    {
        draw_sprite_ext(sprCadreDialogue, image_index, vx+X, vy+Y, scaleSprCadreDialogueX, scaleSprCadreDialogueY, image_angle, image_blend, image_alpha);
    }
    else if (sprite_exists(sprCadre))
    {
        draw_sprite_ext(sprCadre, image_index, vx+X, vy+Y, scaleSprCadreX, scaleSprCadreY, image_angle, image_blend, image_alpha);
    }
    
    
    //PORTRAIT
    if (isPortrait)
    {
        if (portraitBgStyle == RECTANGLE)
        {
            draw_rectangle_colour(vx+PX, vy+PY, PX+portraitW, PY+portraitH, coul1, coul2, coul3, coul4, false);
        }
        else
        {
            if (sprite_exists(sprBgPortrait))
            {
                draw_sprite_ext(sprBgPortrait, image_index, vx+PX, vy+PY, scaleBgPortraitW, scaleBgPortraitH, image_angle, image_blend, image_alpha);
            }
            else
            {
                draw_sprite_ext(sprite_index, image_index, vx+PX, vy+PY, sprBgPortraitDefaultX, sprBgPortraitDefaultY, image_angle, image_blend, image_alpha);
            }
        }
        
        draw_sprite_ext(currentPortrait, image_index, vx+PX, vy+PY, scalePW, scalePH, image_angle, image_blend, image_alpha);
        
        if (sprite_exists(sprCadrePortrait))
        {
            draw_sprite_ext(sprCadrePortrait, image_index, vx+PX, vy+PY, scaleSprCadrePortraitX, scaleSprCadrePortraitY, image_angle, image_blend, image_alpha);
        }
        else if (sprite_exists(sprCadre))
        {
            draw_sprite_ext(sprCadre, image_index, vx+PX, vy+PY, scaleSprCadreXportrait, scaleSprCadreYportrait, image_angle, image_blend, image_alpha);
        }
    }
}

skipFirstDraw = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
