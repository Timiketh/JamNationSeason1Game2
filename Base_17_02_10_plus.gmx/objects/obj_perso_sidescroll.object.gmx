<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_able</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vitesse = 5;

w = sprite_get_width(sprite_index) * image_xscale;
h = sprite_get_height(sprite_index) * image_yscale;

scr_safe_check(obj_touche_up);
scr_safe_check(obj_touche_down);
scr_safe_check(obj_touche_right);
scr_safe_check(obj_touche_left);
scr_safe_check(obj_touche_a);
scr_safe_check(obj_touche_d);
scr_safe_check(obj_touche_s);
scr_safe_check(obj_touche_w);

image_speed = 0;

vitesseImage = 0.2;

actionUp = instance_create(0,0,obj_bouge_sidescroll);
actionUp.argv[1] = 1;
actionUp.target = id;
actionUp.negatif = -1;
actionDown = instance_create(0,0,obj_bouge_sidescroll);
actionDown.argv[1] = 1;
actionDown.target = id;
actionDown.negatif = 1;
actionLeft = instance_create(0,0,obj_bouge_sidescroll);
actionLeft.argv[1] = 0;
actionLeft.target = id;
actionLeft.negatif = -1;
actionRight = instance_create(0,0,obj_bouge_sidescroll);
actionRight.argv[1] = 0;
actionRight.target = id;
actionRight.negatif = 1;

conditionUp = obj_call_true;
conditionDown = obj_call_true;
conditionLeft = obj_call_true;
conditionRight = obj_call_true;

limitDown = room_height;
limitUp = 0;
limitRight = room_width;
limitLeft = 0;

freeze = false;

resetAnimOnStop = true;
switchXScale = true;

resetAnimOnStopCall = new_call_1(scr_reset_image_index, id);

spriteMarche=sprite_index;

isUp = false;
isDown = false;
isRight = false;
isLeft = false;
bougeAnim = false;

pasAnimUp = false;
pasAnimDown = false;
pasAnimLeft = false;
pasAnimRight = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bougeAnim = false;
if (!freeze)
{
    if (scr_activation_button("HOLD", obj_touche_down))
    {
        if (place_free(x, y+vitesse) &amp;&amp; y + vitesse + (sprite_height-sprite_yoffset) &lt; limitDown)
        {
            //y += vitesse;
            if (scr_execute(conditionDown))
            {
                scr_execute(actionDown);
                isDown = true;
            }
        }
    }
    
    if (scr_activation_button("HOLD", obj_touche_up))
    {
        if (place_free(x, y-vitesse) &amp;&amp; y - vitesse + sprite_yoffset &gt; limitUp)
        {
            //y -= vitesse;
            if (scr_execute(conditionUp))
            {
                scr_execute(actionUp);
                isUp = true;
            }
        }
    }
    
    if (scr_activation_button("HOLD", obj_touche_left))
    {
        if (switchXScale &amp;&amp; image_xscale &gt; 0)
        {
            image_xscale *= -1;
        }
        if ((x - vitesse + sprite_xoffset &gt; limitLeft))
        {
            if (place_free(x-vitesse, y))
            {
                //x -= vitesse;
                if (scr_execute(conditionLeft))
                {
                    scr_execute(actionLeft);
                    isLeft = true;
                }
            }
        }
    }
    
    if (scr_activation_button("HOLD", obj_touche_right))
    {
        if (switchXScale &amp;&amp; image_xscale &lt; 0)
        {
            image_xscale *= -1;
        }
        if (x + vitesse + (sprite_width-sprite_xoffset) &lt; limitRight)
        {
            if (place_free(x+vitesse, y))
            {
                //x += vitesse;
                if (scr_execute(conditionRight))
                {
                    scr_execute(actionRight);
                    isRight = true;
                }
            }
        }
    }
}

if (isUp &amp;&amp; isDown)
{
    isUp = false;
    isDown = false;
}

if (isLeft &amp;&amp; isRight)
{
    isLeft = false;
    isRight = false;
}

if ((isUp &amp;&amp; !pasAnimUp) || (isDown &amp;&amp; !pasAnimDown) || (isLeft &amp;&amp; !pasAnimLeft) || (isRight &amp;&amp; !pasAnimRight))
{
    bougeAnim = true;
}

if (bougeAnim)
{
    sprite_index = spriteMarche;
    image_speed = vitesseImage;
}
else
{
    image_speed = 0;
    if (resetAnimOnStop)
    {
        scr_execute(resetAnimOnStopCall);
    }
}

w = sprite_get_width(sprite_index) * image_xscale;
h = sprite_get_height(sprite_index) * image_yscale;

depth = -scr_sprite_bas(id);


isUp = false;
isDown = false;
isRight = false;
isLeft = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
