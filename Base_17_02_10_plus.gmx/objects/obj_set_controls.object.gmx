<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_safe_check(obj_game_input);

sel_input1 = true;
sel_input2 = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sel_input1)
{
    if(keyboard_check_pressed(vk_anykey)){
        with(obj_game_input.input1)instance_destroy();
        obj_game_input.input1 = new_call(scr_keyboard_button, keyboard_key);
        obj_game_input.input1.persistent = true;
        sel_input1 = false;
        show_debug("key");
    }
    if(mouse_check_button_pressed (mb_any)){
        with(obj_game_input.input1)instance_destroy();
        obj_game_input.input1 = new_call(scr_mouse_mb, mouse_button);
        obj_game_input.input1.persistent = true;
        sel_input1 = false;
        show_debug("mouse");
    }
    if(gamepad_get_device_count() &gt; 0){
    
        for (i=gp_face1; i&lt;gp_axisrv; i+=1){
            
            if(gamepad_button_check_pressed(0,i)){
                with(obj_game_input.input1)instance_destroy();
                obj_game_input.input1 = new_call(scr_gamepad_button, i);
                obj_game_input.input1.persistent = true;
                sel_input1 = false;
                show_debug("gamepad");
            }
        }
    }
    if(!sel_input1) {
        sel_input2 = true;
        room_goto(room_bind2);
    }
    
    
}else if(sel_input2)
{
    
    if(keyboard_check_pressed(vk_anykey)){
        with(obj_game_input.input2)instance_destroy();
        obj_game_input.input2 = new_call(scr_keyboard_button, keyboard_key);
        obj_game_input.input2.persistent = true;
        sel_input2 = false;
        show_debug("key");
    }
    if(mouse_check_button_pressed (mb_any)){
        with(obj_game_input.input2)instance_destroy();
        obj_game_input.input2 = new_call(scr_mouse_mb, mouse_button);
        obj_game_input.input2.persistent = true;
        sel_input2 = false;
        show_debug("mouse");
    }
    if(gamepad_get_device_count() &gt; 0){
    
        for (i=gp_face1; i&lt;gp_axisrv; i+=1){
            
            if(gamepad_button_check_pressed(0,i)){
                with(obj_game_input.input2)instance_destroy();
                obj_game_input.input2 = new_call(scr_gamepad_button, i);
                obj_game_input.input2.persistent = true;
                sel_input2 = false;
                show_debug("gamepad");
            }
        }
    }
}else{
    instance_destroy()
    //
    room_goto(room_option);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tex = 1;
if(sel_input2)tex=2
draw_text(100,100,tex);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
