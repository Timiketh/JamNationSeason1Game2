<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>target = -1;

effet = -1;

init = false;

active = false;

isSelfDrawn = true;

surface = -1;

X = 0;
Y = 0;
W = 0;
H = 0;

APP_W = surface_get_width(application_surface);
APP_H = surface_get_height(application_surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (-1 != effet &amp;&amp; instance_exists(effet))
{
    with (effet)
    {
        instance_destroy();
    }
}
surface_free(surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (-1 == target || !instance_exists(target))
{
    instance_destroy();
}
else
{
    if (init)
    {
        if (active)
        {
            target.visible = false;
            depth = target.depth;
            persistent = target.persistent;
            effet.persistent = target.persistent;
        }
        else
        {
            target.visible = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!init)
{
    spr_w = sprite_get_width(target.sprite_index);
    spr_h = sprite_get_height(target.sprite_index);
    effet.target = target;
    init = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!exists(target))
{
    instance_destroy();
}
else
{
    if (init)
    {
        with(target)
        {
            event_perform(ev_draw, event_number);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (-1 == target || !instance_exists(target))
{
    instance_destroy();
}
else
{
    if (active &amp;&amp; init)
    {
        if (!surface_exists(surface))
        {
            surface = surface_create(APP_W, APP_H);
        }
        surface_set_target(surface);
         
        draw_clear_alpha(c_black, 0);
        
        X = view_xview[view_current];
        Y = view_yview[view_current];
        
        W = view_wview[view_current];
        H = view_hview[view_current];
        
        if (isSelfDrawn)
        {
            draw_sprite_ext(target.sprite_index, target.image_index, (APP_H/H)*(target.x-X), (APP_H/H)*(target.y-Y), (APP_W/W)*target.image_xscale, (APP_H/H)*target.image_yscale, target.image_angle, target.image_blend, target.image_alpha);
        } 
        else 
        {
            with (target)
            {
                var hasTarget = (object_index == obj_tete_uni);
                var oldTargetX = -1;
                var oldTargetY = -1;
                var oldTargetImageXscale = -1;
                var oldTargetImageYscale = -1;
                if (hasTarget)
                {
                    oldTargetX = target.x;
                    oldTargetY = target.y;
                    target.x = (other.APP_W/other.W)*(target.x-other.X);
                    target.y = (other.APP_H/other.H)*(target.y-other.Y);
                    oldTargetImageXscale = target.image_xscale;
                    oldTargetImageYscale = target.image_yscale;
                    target.image_xscale = (other.APP_W/other.W)*oldTargetImageXscale;
                    target.image_yscale = (other.APP_H/other.H)*oldTargetImageYscale;
                }
                var oldX = x;
                var oldY = y;
                x = (other.APP_W/other.W)*(x-other.X);
                y = (other.APP_H/other.H)*(y-other.Y);
                var oldImageXscale = image_xscale;
                var oldImageYscale = image_yscale;
                image_xscale = (other.APP_W/other.W)*oldImageXscale;
                image_yscale = (other.APP_H/other.H)*oldImageYscale;
                event_perform(ev_draw, event_number);
                image_xscale = oldImageXscale;
                image_yscale = oldImageYscale;
                x = oldX;
                y = oldY;
                if (hasTarget)
                {
                    target.x = oldTargetX;
                    target.y = oldTargetY;
                    target.image_xscale = oldTargetImageXscale;
                    target.image_yscale = oldTargetImageYscale;
                }
            }
        }
        
        surface_reset_target();
        
        if (-1 != effet &amp;&amp; instance_exists(effet))
        {
            if (shader_is_compiled(effet.shader))
            {
                shader_set(effet.shader);
                scr_shader_set_params(effet);
            }
        }
        
        draw_surface_stretched(surface, X, Y, W, H);
        
        if (-1 != effet &amp;&amp; instance_exists(effet))
        {       
            if (shader_is_compiled(effet.shader))
            {
                shader_reset();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
