<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>w = 6;
h = 8;

init = false;

zeGrid = -1;

condition = new_call(scr_insto_x_smaller_than, -1, room_width/2);

persoSprite = spr_blueFront;//spr_perso_1;
scaleSprite = 1;

perso = -1;

index = 0;

nbNode = 0;


nbEteient = 0;
nbAllume = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!init)
{
    init = true;
    zeGrid = ds_grid_create(w, h);
    for (var i = 0; i &lt; w; i++)
    {
        for (var j = 0; j &lt; h; j++)
        {
            zeGrid[# i, j] = -1;
        }
    }
    
    var allNodes = ds_list_create();   
    with (obj_node)
    {
        other.condition.argv[0] = id;
        if (scr_execute(other.condition))
        {
            ds_list_add(allNodes, id);       
        }
    }
    
    var taille = ds_list_size(allNodes);
    var allValuesX = ds_map_create();
    var allValuesY = ds_map_create();
    for (var i = 0; i &lt; taille ; i++)
    {
        var elem = allNodes[|i];
        ds_map_add(allValuesX, elem.x, ds_map_size(allValuesX));
        ds_map_add(allValuesY, elem.y, ds_map_size(allValuesY));
    }
    
    var listAllValuesX = ds_list_create();
    var listAllValuesY = ds_list_create();
    
    var tailleX = ds_map_size(allValuesX);
    var tailleY = ds_map_size(allValuesY);
    
    var key = ds_map_find_first(allValuesX);
    for (var i = 0; i &lt; tailleX; i++)
    {
        ds_list_add(listAllValuesX, key);
        key = ds_map_find_next(allValuesX, key);
    }
    
    key = ds_map_find_first(allValuesY);
    for (var i = 0; i &lt; tailleY; i++)
    {
        ds_list_add(listAllValuesY, key);
        key = ds_map_find_next(allValuesY, key);
    }
    
    ds_list_sort(listAllValuesX, true);
    ds_list_sort(listAllValuesY, true);
    
    ds_map_clear(allValuesX);
    ds_map_clear(allValuesY);
    
    for (var i = 0; i &lt; tailleX; i++)
    {
        ds_map_add(allValuesX, listAllValuesX[|i], i);
    }
    
    for (var i = 0; i &lt; tailleY; i++)
    {
        ds_map_add(allValuesY, listAllValuesY[|i], i);
    }
    
    with (obj_node)
    {
        other.condition.argv[0] = id;
        if (scr_execute(other.condition))
        {
            var thisGridX = allValuesX[? x];
            var thisGridY = allValuesY[? y];
            
            other.zeGrid[# thisGridX, thisGridY] = id;
            other.nbNode++;
            gridX = thisGridX;
            gridY = thisGridY;
           
        }
    }
    
    ds_map_destroy(allValuesX);
    ds_map_destroy(allValuesY);
    ds_list_destroy(listAllValuesX);
    ds_list_destroy(listAllValuesY);
    ds_list_destroy(allNodes);
    
    var playo = instance_create(0, 0, obj_perso);
    
    var ok = false;
    var playoX = 0;
    var playoY = 0;
    while (!ok)
    {
        playoX = irandom(w-1);
        playoY = irandom(h-1);
        if (exists(zeGrid[# playoX, playoY]))
        {
            playo.gridX = playoX;
            playo.gridY = playoY;
            ok = true;
        }
    }
    
    playo.grid = id;
    playo.x = zeGrid[# playoX, playoY].x;
    playo.y = zeGrid[# playoX, playoY].y;
    playo.moveToX = playo.x;
    playo.moveToY = playo.y;
    playo.sprite_index = persoSprite;
    playo.image_xscale = scaleSprite;
    playo.image_yscale = scaleSprite;
    playo.image_speed = 0.3;
    
    if (persoSprite == spr_blueFront)
    {
        playo.image_xscale = 0.8;
        playo.image_yscale = 0.8;
    }
    
    perso = playo;
    if (index == 0)
    {
        scr_set_node_active(playoX, playoY, id);
    }
    
    
    
    for (var i = 0; i &lt; w; i++)
    {
        for (var j = 0; j &lt; h ; j++)
        {
            var thisNode = zeGrid[# i, j];
            if (exists(thisNode))
            {
                if (thisNode.connectL)
                {
                    var X = scr_sprite_gauche(thisNode);
                    var Y = thisNode.y;
                    var pont = instance_create(X, Y, obj_pont);
                    pont.image_angle = 180;
                    pont.image_xscale = thisNode.image_xscale;
                    pont.image_yscale = thisNode.image_yscale;
                }
                if (thisNode.connectU)
                {
                    var X = thisNode.x;
                    var Y = scr_sprite_haut(thisNode);
                    var pont = instance_create(X, Y, obj_pont);
                    pont.image_angle = 90;
                    pont.image_xscale = thisNode.image_xscale;
                    pont.image_yscale = thisNode.image_yscale;
                }
                if (thisNode.connectD)
                {
                
                    var X = thisNode.x;
                    var Y = scr_sprite_bas(thisNode);
                    var pont = instance_create(X, Y, obj_pont);
                    pont.image_angle = 270;
                    pont.image_xscale = thisNode.image_xscale;
                    pont.image_yscale = thisNode.image_yscale;
                }
                if (thisNode.connectR)
                {
                    var X = scr_sprite_droite(thisNode);
                    var Y = thisNode.y;
                    var pont = instance_create(X, Y, obj_pont);
                    pont.image_angle = 0;
                    pont.image_xscale = thisNode.image_xscale;
                    pont.image_yscale = thisNode.image_yscale;
                }
            }
        }
    }
    
    var half = floor(nbNode/2);
    while(half &gt; 0)
    {
        var randX = irandom(w-1);
        var randY = irandom(h-1);
        var randNode = zeGrid[# randX, randY];
        if (exists(randNode) &amp;&amp; !randNode.allume)
        {
            half -= 1;
            randNode.allume = true;   
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
nbAllume = 0;
nbEteint = 0;
for (var i = 0; i &lt; w; i++)
{
    for (var j = 0; j &lt; h; j++)
    {
        var thisNode = zeGrid[# i, j];
        if (exists(thisNode))
        {
            if (thisNode.allume)
            {
                nbAllume++;
            }
            else
            {
                nbEteint++;
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
