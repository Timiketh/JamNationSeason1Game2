<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-103</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
actif = false;
target = -1;

rayon = 50;

image_blend = c_blue;
image_alpha = 0.7;

w = sprite_get_width(sprite_index);
h = sprite_get_height(sprite_index);

click = false;


icone = sprite_index;

icone_w = w;
icone_h = h;

iconeBlend = c_white;
iconeAlpha = 1;
iconeAngle = 0;
iconeImageIndex = 0;

iconeXscale = 1;
iconeYscale = 1;

init = false;

scaleIcone = false;

effacable = false;

over = false;

delete = -1;

refresh = 0;

origineCoin = false;

callActivation = instance_create(x,y,obj_vignette_activable_souris);
callActivation.dependency = id;
callActivation.target = id;

postActivation = new_call();
postActivation.dependency = id;
postActivation.execute = scr_nop;
postActivation.argc = 0;


skipFirstDraw = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!init)
{
    init = true;
    if (effacable)
    {
        delete = instance_create(0,0,obj_vignette_delete);
        delete.rayon = rayon / 10;
        delete.target = id;
    }
}

if (scaleIcone)
{
    icone_w = sprite_get_width(icone);
    icone_h = sprite_get_height(icone);

    iconeXscale = (rayon/icone_w);
    iconeYscale = (rayon/icone_h);
    scaleIcone = false;
}

if (actif)
{    
    over = (point_distance(x, y, mouse_x, mouse_y) &lt; rayon);

    if (scr_execute(callActivation))
    {
        click = true;
        if (instance_exists(target) &amp;&amp; target.ouvert)
        {
            target.source = id;
            target.action = true;
            scr_execute(postActivation);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!skipFirstDraw)
{
    if (actif &amp;&amp; refresh == 0)
    {
        image_xscale = rayon*2/w;
        image_yscale = rayon*2/h;
        draw_sprite_ext(sprite_index, image_index, x, y, rayon*2/w, rayon*2/h, image_angle, image_blend, image_alpha);
        var thisX = x;
        var thisY = y;
        var iconeOriginalWidth = sprite_get_width(icone);
        var iconeOriginalHeight = sprite_get_height(icone);
        var originX = sprite_get_xoffset(icone);
        var originY = sprite_get_yoffset(icone);
        var ratioX = originX/iconeOriginalWidth;
        var ratioY = originY/iconeOriginalHeight;
        var thisOffsetX = (rayon*2*ratioX)-(rayon);
        var thisOffsetY = (rayon*2*ratioY)-(rayon);
        thisOffsetX /= 2;
        thisOffsetY /= 2;
        draw_sprite_ext(icone, iconeImageIndex, thisX+thisOffsetX, thisY+thisOffsetY, iconeXscale, iconeYscale, iconeAngle, iconeBlend, iconeAlpha); 
    }
    if (refresh &gt; 0)
    {
        refresh -= 1;
    }
}
skipFirstDraw = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>20,20</point>
    <point>20,20</point>
  </PhysicsShapePoints>
</object>
